//TicTacToeTester.java
import java.util.Scanner;

public class TicTacToeTester
{
    public static void main(String[] args)
    {
        TicTacToe game = new TicTacToe();
        Scanner input = new Scanner(System.in);
        
        System.out.println("Initial board: ");
        game.printBoard();
        while (game.checkWin() == false) {
            System.out.println("Enter column to play:");
            int tempRow = input.nextInt();
            System.out.println("Enter row to play:");
            int tempCol = input.nextInt();
            if (tempRow < 3 && tempCol < 3)
            {
                game.takeTurn(tempRow, tempCol);
                game.printBoard();
            }
            else {
                System.out.println("out of bounds");
            }
            
        }
        System.out.println("game over");
    }
}


//TicTacToe.java
public class TicTacToe
{
   private String[][] board;
   private int turn;
    
    //constructors
    public TicTacToe()
    {
        board = new String[][]{{"-","-","-"}, {"-","-","-"}, {"-","-","-"}};
    }

    public String[][] getBoard()
    {
        return this.board;
    }
   
   //copy over your constructor from the Tic Tac Toe Board activity in the previous lesson!
   
   
   //this method returns the current turn
   public int getTurn()
   {
       return turn;
   }
   
   /*This method prints out the board array on to the console
   */
   public void printBoard()
   {
       System.out.println("  0 1 2");
       System.out.println("0 " + board[0][0] + " " + board[0][1] + " " + board[0][2] + " ");
       System.out.println("1 " + board[1][0] + " " + board[1][1] + " " + board[1][2] + " ");
       System.out.println("2 " + board[2][0] + " " + board[2][1] + " " + board[2][2] + " ");
   }
   
   //This method returns true if space row, col is a valid space
   public boolean pickLocation(int row, int col)
   {
       if (board[row][col].equals("-") && row < 3 && col < 3) {
           return true;
       }
       else
       {
           return false;
       }
   }
   
   //This method places an X or O at location row,col based on the int turn
   public void takeTurn(int row, int col)
   {
       if (turn == 0) {
           board[row][col] = "X";
       }
       else if (turn % 2 == 0)
       {
           board[row][col] = "X";
       }
       else if (turn % 2 != 0)
       {
           board[row][col] = "O";
       }
       turn++;
   }
   
   //This method returns a boolean that returns true if a row has three X or O's in a row
   public boolean checkRow()
   {
       for (int i = 0; i < 3; i++) {
           if (board[i][0].equals("X") && board[i][1].equals("X") && board[i][2].equals("X")) {
               return true;
           }
           else if (board[i][0].equals("O") && board[i][1].equals("O") && board[i][2].equals("O")) {
               return true;
           }
           else {
               return false;
           }
           
       }
       return false;
   }
   
    //This method returns a boolean that returns true if a col has three X or O's
   public boolean checkCol()
   {
       for (int i = 0; i < 3; i++) {
           if (board[0][i].equals("X") && board[1][i].equals("X") && board[2][i].equals("X")) {
               return true;
           }
           else if (board[0][i].equals("O") && board[1][i].equals("O") && board[2][i].equals("O")) {
               return true;
           }
           else {
               return false;
           }
           
       }
       return false;
   }
   
    //This method returns a boolean that returns true if either diagonal has three X or O's
   public boolean checkDiag()
   {
        for (int i = 0; i < 3; i++) {
           if (board[0][0].equals("X") && board[1][1].equals("X") && board[2][2].equals("X")) {
               return true;
           }
           else if (board[0][0].equals("O") && board[1][1].equals("O") && board[2][2].equals("O")) {
               return true;
           }
            else if (board[0][2].equals("X") && board[1][1].equals("X") && board[2][0].equals("X")) {
               return true;
           }
           else if (board[0][2].equals("O") && board[1][1].equals("O") && board[2][0].equals("O")) {
               return true;
           }
           else {
               return false;
           }
           
       }
       return false;
   }
   
   //This method returns a boolean that checks if someone has won the game
   public boolean checkWin()
   {
       if (checkCol() || checkRow() || checkDiag())
       {
           return true;
       }
       return false;
   }

}
